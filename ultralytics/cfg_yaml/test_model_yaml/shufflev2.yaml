# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [1, 1, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:  #__init__(self, c1, c2, s, n=1, e=0.5, pool=False): #输入 输出 步长 内部多少个 类似botleneck结构 池化
  # [from, repeats, module, args]  输出小于输入 步长决定通道数  e决定是否为bootneck
  - [-1, 1, Conv, [3, 3, 2]] # 
  - [-1, 1, Conv, [16, 3, 2]] # 
  - [-1, 1, Conv, [32, 3, 2]] #    32 160 160

  - [-1, 1, ShuffleNetV2, [32, 2, 1,0.5,False]] #    32 80 80
  - [-1, 1, Conv, [64, 3, 1]]  #64 80 80 拼接

  - [-1, 1, Conv, [128, 3, 2]]  #128 40 40
  - [-1, 1, ShuffleNetV2, [128, 1, 2,0.5,False]] #128 40 40 拼接
  - [-1, 1, Conv, [256, 3, 2]] # 256 20 20

  - [-1, 1, ShuffleNetV2, [256, 1, 1, 1,True]] # 256 20 20
  - [-1, 1, SPPF, [256, 5]] # 256 2 2

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #256 40 40
  - [[-1, 6], 1, Concat, [1]] # 384 40 40
  - [-1, 2, C2f, [128]] # 128 80 80   12层拼接

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3  #192 8 8
  - [-1, 1, C2f, [64]] # 

  - [-1, 1, Conv, [64, 3, 2]] #64 4 4
  - [[-1, 12], 1, Concat, [1]] # 192 40 40
  
  - [-1, 1, C2f, [128]] # 18 

  - [-1, 1, Conv, [128, 3, 2]]
  - [[-1, 9], 1, Concat, [1]] # cat head P5  384 20 20
  - [-1, 1, C2f, [256]] # 256 20 20

  - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
